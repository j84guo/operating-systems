/****************************
Operating System Structures :
****************************/

OS organization can be viewed in two ways.
1. services
2. interface to users/programers
3. components and interconnections

System Stack :
user interfaces -> GUI, batch, command line
system calls 
services -> program execution, I/O operations, file systems, communication, resource allocation, accounting, error detection, protection and security
os
hardware

OS User Services : 
User interface - GUI, batch, command line
Program Execution - load a program into memory and execute it
I/O Operations - running progams may require files, I/O devices, etc. and an interface to perform I/O
File System manipulation - read, write, create, delete, search, information, permissions
Communications - inter-process communication (shared memory or message passing)
Error detection - terminate process or provide error code to process for correction

OS System Services :
Resource allocation - share between multiple jobs/users. Some may have special allocation code (CPU, memory, files) while others may have much more general
request/release code (I/O devices) 
Accounting - track user/process resource usagei
Protection and Security - protection defines access roles while security requires authentication into those roles

User and OS Interface :

Command line 
-> known as shells (bourne, c, bourne-again, etc.)
-> the command interpreter is a special user space program which communicates with the kernel
-> the interpreter itself may contain code for a command (parse parameters to determine system calls) 
-> most commands however are implemented as stand alone user programs that the interpreter invokes

GUI
-> desktop, touch

System Calls :
-interface to ther services provided by the OS 
-generally routines written in C/C++ or even assembly
-system calls are made by a user space library, which application programmers use (POSIX API)
-generally, the API makes the appropriate system calls
-the posix api functions may be very similar to the actual system calls (architecture specific assembly routies)
-parmaeters to the OS may be passed in registers, as a pointer to a block of memory, or pushed onto a stack.

Types of System Calls :

1. process control
-running program needs to be able to halt its own execution, either normally with end() or abnormally with abort()
-fork()
-exit()
-wait()

2. file manipulation
-open(), read(), write(), close()
-get_file_attributes(), set_file_attributes()
-move(), copy()

3. device manipulation
-OS resources can be thought of as devices, either physical (disk drives) or abstract (files)
-ioctl(), read(), write()
-in unix, devices are represented by files!

4. information maintenance
-getpid()
-alarm()
-sleep()
-memory, disk space, processes/threads etc.

5. communication (IPC)
-pipe()
-shm open()
-mmap()

Message passing :
-useful for smaller amounts of data
-the sender must identify the recipient, process id, hostname, ip
Shared memory :
-maximizes communication speed
-processes read/write to a common memory block

6. protection
-control access to resources (files, disks)
-set_permission(), get_permission() 
-allow_user(), deny_user()
-chmod()
-umask()
-chown()

System Programs : 
File management -  manipulate files and directories
Status information - resource utilization (cpu, network, disk), date, users
File modification - text editors
Programming language support - compilers, assemblers, debuggers, interpreters
Prorgram loading and execution - absolute loaders, relocatable loaders, linkage editors, and overlay loaders
Communications - virtual connections among processes, users, and computer systems
Background services (daemons) - network daemons, system monitoring services

Application Programs : 
Common operations, e.g. browsers, word processors, databases, etc.

OS Design and Implementation : 

Design goals  
-hardware, type (batch, time sharing, single/multi user, distributed, real time, general purpose)
-user and system goals

Mechanisms and Policies  
-separation between mechanism (how) and policy (what)

Implementation
-early OS's were written in assembly
-now most are written in C while some are in C++
-utilities can be partly written in python/perl 
-major performance improvements in operating systems are more likely to be the result of better data structures and 
 algorithms than of excellent assembly-language code

 
OS Structure : 
monolith, layered, microkernel, modules

OS Debugging : 
program failures are logged
performance tuning can be done based on traces of system behaviour

OS Boot : 
For the computer system to begin running, the CPU must initialize and start executing the bootstrap program in firmware.
The bootstrap can execute the operating system directly if the operating system is also in the firmware, or it can complete a sequence in which it 
loads progressively smarter programs from firmware and disk until the operating system itself is loaded into memory and executed.



























