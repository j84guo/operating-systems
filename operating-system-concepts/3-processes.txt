/**********
Processes :
**********/

Introduction :

A program in execution, the unit of work in a modern time-sharing operating system.  

Include code, processor registers, process stack (temporary data such as function parameters, return addresses, and local variables), data section (global) and heap (dynamically allocated 
memory). Programs are static files, processes are programs loaded in memory and running.   


Process State :

New - created
Running - instructions executing in CPU
Waiting - waiting on I/O
Ready - waiting to be assigned to a processor 
Terminated - finished execution


Process Control Block : 

Represents a process in the kernel.

process state - states of the process lifecycle 
program counter - address of next instruction
cpu registers - PC, IR, SP, normal registers
cpu scheduling information - priority, pointers to scheduling queues
memory management information - base/limit registers, page tables
accounting information - cpu use, process id
i/o status information - open files, I/O devices used by the process


Threads :

Processes can have multiple threads of execution allowing multiple tasks to be performed concurrently. In this case the PCB is expanded to include information for each thread.


Process Scheduling : 

The objective of multiprogramming is to have at least one process executing on each processor at any time. Time sharing seeks to switch the processes (context switch) so frequently that the
use can perform do multiple things at concurrently. The process scheduler selects a ready process to dispatch to a CPU.


Scheduling Queues :

job queue, ready queue, device queue



Schedulers :

short term - memory to cpu
medium term - swap
long term - disk to memory (batch os)


Context Switch :

Preserving the state of a process to run another process, but switch back to the original later. (i.e. PCM information like registers, address space)


Process Creation :

The init process is the parent of all user processes. In general, child processes need resources. These can be allocated by the OS, or even a partition of the parent's. The parent may also 
provide initialization data. A parent may execute concurrently with children, or wait for the children to finish. Additionally, the child may either be a duplicate of the parent or have a new 
program loaded into it. 

A new process is created by the fork() system call. The new process consists of a copy of the address space of the original process. This mechanism allows the parent process to communicate 
easily with its child process. Both processes (the parent and the child) continue execution at the instruction after the fork() , with one difference: the return code for the fork() is zero 
for the new (child) process, whereas the (nonzero) process identifier of the child is returned to the parent. The child may call exec() to overwrite its memory with a new process, or it
can run the same code as the parent, in which case the two processes are running the same source code! Of course, each has its own address space and data. 


Process termination : 

A process terminates when it finishes executing its final statement and asks the operating system to delete it by using the exit() system call. At that point the child may return a status
to the parent via wait() and releases its resources . 

A process that terminates releases it memory data structures, but the PCB block remains until its parent calls wait().
Another way for termination to occur is the parent calling kill() with an appropriate signal. Zombie processes are children who have terminated, but whose parents have no called wait(). 


Inter Process Communication :

Processes can be independent or co-operating. Obviously, any processes using IPC are co-operating. The two main IPC techniques are message passing and shared memory. In message passing,
processes exchange messages, co-ordinated by the kernel using system calls, where as shared memory only requires initial system calls to setup shared memory, then processes communicate
by reading/writing to it. Note that this requires the processes to have access to each other's memory, because the shared region is usually within the address space of the processes.

Recent research on systems with several processing cores indicates that message passing provides better performance than shared memory on such systems. Shared memory suffers from cache 
coherency issues, which arise because shared data migrate among the several caches. As the number of processing cores on systems increases, it is possible that we will see message
passing as the preferred mechanism for IPC.


Shared Memory :
-shared region of memory usually within the process' address space
-process protection rules relaxed

Message Passing :
-either os provides message passing facility, e.g. send(message) receive(message) 
-or processes share memory and application programmer writes code to access that region

Naming :
direct communication - process explicitly specifies recipient (tricky to maintain due to hardcoded process id) 
indirect communication - messages sent to ports  

Synchronization :
blocking send - sending process until recipient receives
nonblocking send - sending process send and resumes operation 
blocking receive - receiver blocks until the message is available
nonblocking receive - reveiber either retrieves a valid message or null

Buffering :
Whether direct or indirect, messages reside in a temprary message queue. 
zero capacity - sender blocks until recipient receives
boudned capacity - only when the queue is full does the sender block
unbounded capacity - sender just inserts into the queue


Client Server Communication : 

1. Sockets  
A socket is an abstraction used by a programming language to tell the operatign system to send/receive data over a network. Thus the socket represents an endpoint in a (generally TCP) 
connection, represented by an IP address and a port number. In unix, network sockets are treated as files that can be written to and read from.

2. Remote Procedure Call
The semantics of RPC s allows a client to invoke a procedure on a remote host as it would invoke a procedure locally. The RPC system hides the details
that allow communication.  

3. Pipes 
A pipe acts as a conduit allowing two processes to communicate. Pipes were one of the first IPC mechanisms in early UNIX systems. They typically provide
one of the simpler ways for processes to communicate with one another, although they also have some limitations. In implementing a pipe, four issues must be considered:

-bidirectional vs unidirectional 
-half duplex or full duplex 
-parent child relation between processes
-local or network

ordinary pipes -  producer/consumer communication, unidirectional, read end and write end, typically used for parent to child communication 

named pipes (FIFO) - no parent/child relationship. bidirectional, appear as files in UNIX, local processes only  


POSIX Shared Memory :

POSIX shared memory is organized using memory-mapped files, which associate the region of shared memory with a file. A process must first create a shared-memory object using the 
shm_open(name, O CREAT | O RDWR, 0666) system call. Once the object is established, the ftruncate() function is used to configure the size of the object in bytes. 









