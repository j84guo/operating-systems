/******
General
******/

There are two types of sockets :
1) Unix sockets are an IPC communication mechanism allowing data transfer (via the kernel) between processes of the same opereating system. They are special files
   created with capabilities/restrictions facilitating processes to communicate by reading/writing to it.
2) Network sockets are a mechanism for communicating between processes over a network, they are an abstraction of an endpoint. Generally sockets are created and used 
   via an API like the POSIX socket API. A TCP socket encapsulates and IP address and port.

File Handle :
Handle used to acces a disk file or other I/O resource like a network socket.

Socket vs Port :
IP address -> Routes data to a specific host on the network.
Port -> Routes to a specific socket on the host (not necessarily one process).
Socket -> The object a process uses to talk to the OS about a specific connection, like a file descriptor. 

/********
Technical
********/

// File descriptors are of type int

// The addrinfo struct is a recent introduction which holds socket information for later use.
// It's also used in host name lookups
struct addrinfo {
	int flags; // socket behaviour
	int ai_family; // ipv4, ipv6
	struct sock_addr ai_addr; // address
	int ai_protocol; // ip
	int ai_socktype; // tcp, udp
	...
};

// Returns a linked list of addrinfo structs (importantly with the struct sock_addr filled) found based on the host name resolution
// Also replaces the older gethostbyname()
getaddrinfo()

// Generic struct holding address information for many types of sockets 
struct sockaddr {
	char sa_data[14];
	unsigned int sa_family; 
};

// ipv4 socket only, see sockaddr_in6 for ipv6
// struct sockaddr_in can be cast to the more generic sockaddr for use in functions like connect() and accept()
struct sockaddr_in {
	short int sin_family; // AF_INET (ipv4), AF_INET6 (ipv6)
	unsigned short int sin_port; // Port number, should be set to big-endian byte order with htons()
	struct in_addr sin_addr; // Address
	unsigned char sin_zero[8]; // Pads struct sockaddr_in to the same length as sockaddr, should be zeroed with memset()
};


// ipv4 address only, see in6_addrfor ipv6
// this structure exists for historical reasons
struct in_addr {
	uint32_t s_addr; // basically a 32 bit int	
};

// presentation to network format
// populates an in_addr or in6_addr with the converted address
struct sockaddr_in sa;
inet_pton(AF_INET, "127.0.0.1", &(sa.sin_addr));

// network to presentation format 
// populates a string with the converted address
char ipv4[LEN];
inet_ntop(AF_INET, sa.sin_addr, ipv4, INET_ADDRSTRLEN);

// 1.
getaddrinfo(
	const char* node, // hostname or ip 
	const char *service, // port
	const struct addrinfo *hints, // partially filled addrinfo struct 
	struct addrinfo **res // linked list of results
)

