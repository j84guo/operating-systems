Chapter 1 - The Big Picture

1.1) Layers of abstraction 
Abstraction is a way to comprehend complexity. A layer describes a component's position between a user and the hardware.

-> Hardware includes main memory, processors (which compute and read/write memory), disks and network interfaces.
-> The kernel is the core of the operating system. It is software loaded into memory, which controls the processors, acting as an 
   interface between running programs and hardware. For example, the kernel manages processes, memory, devices and exposes system calls to user processes.    
-> User space is made of running processes that are kernel-managed, such as web servers, databases, gui's, shells.

The kernel has its own memory area, the kernel space. The kernel runs in kernel mode, which provides unrestricted cpu and memory access. User mode, in comparison, restricts access to a subset of memory, user space, and safe cpu operations.   

1.2) Hardware and memory
Main memory is basically a large are of bits. Kernel and running processes reside in memory. Input and output from devices flows through memory. CPU operations just read instructions/data from memory and writes back to memory. State refers to the abstract state of a process while image means a particular arrangement of bits.

1.3) The Kernel 
One of the kernel's tasks is to split memory into subdivisions and track their states. Each process gets and is limited to its own share of memory.

-> Process management determines which processes can use the CPU, as well as starting, pausing, resuming and terminating processes.
   While running, many processes may share a single processor by making a context switch at the end of their time slices. Since time slices are so fast, humans perceive it as multitasking. The kernel is responsible for context switching as follows :

   1. CPU interrupts a user process based on an internal timer, switches to kernel mode and hands control to the kernel.   
   2. Kernel saves the current memory and CPU state.
   3. Kernel performs any tasks that came up during the preceding time slice, e.g. I/O.
   4. Kernel selects the next process to run from a ready list.
   5. Kernel prepares memory and CPU state for next process.
   6. Kernel tells CPU how long next time slice is.
   7. Kernel switches CPU to user mode and hands control to the process.
   Note that the kernel therefore runs in between time slices!

-> Memory management tracks all memory : process allocated, shared and free.
   Kernel and processes have private space and processes cannot violate each other. Processes can also share memory, while other memory may be read-only. Memory management units in the CPU allow for the technique of virtual memory, where processes perceive only themselves and the kernel. Virtual memory is mapped to physical addresses for each process. It may even exceed real memory size by using paging, which maps memory addresses to secondary storage. 

-> Device drivers are what the kernel uses to operate hardware, allowing it to be an interface between user processes and hardware.
   Device drivers are traditionally part of the kernel and present an interface to hardware.	

-> System calls are how processes communicate with the kernel and request certain tasks, such as reading/writing/opening files.
   fork() makes the kernel make a nearly identical copy of the process
   exec() makes a kernel start a program

1.4) User space
Main memory allocated to user processes make up user space.

1.5) Users
Users are entities which can run processes and own files. Groups permit sharing files. 


















